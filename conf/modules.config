/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/
// General process
process {
    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    withName: 'CHECKSUMS'{
        publishDir = [
            path: { "${params.outdir}/checksums" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: false
        ]
    }

    withName: 'MULTIQC' {
        ext.args   = { params.multiqc_title ? "--title \"$params.multiqc_title\"" : '' }
        publishDir = [
            path: { "${params.outdir}/multiqc" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'GUNZIP' {
        publishDir  = [
            enabled: false
        ]
    }

    withName: 'UCSC_BIGWIGAVERAGEOVERBED' {
        publishDir  = [
            enabled: false
        ]
    }

    withName: 'ENSEMBL_UCSC_CONVERT' {//no publish, convert to UCSC style
        ext.args    = 'toUCSC'
        publishDir  = [
            enabled: false
        ]
    }

    withName: 'BEDGRAPH_TRIM' {
        publishDir  = [
            enabled: false
        ]
    }

    withName: 'WIG_TRIM' {
        ext.args    = 'wig'
        publishDir  = [
            enabled: false
        ]
    }

    withName: 'GET_SCALE' {
        publishDir  = [
            enabled: false
        ]
    }
}

// preparegenome.nf
process {
    withName: 'COOLER_DIGEST' {
        publishDir  = [
            path: { "${params.outdir}/genome/digest" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'RE_CUTSITE' {
        publishDir  = [
            path: { "${params.outdir}/genome/digest" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'GENOME_FILTER' {
        publishDir  = [
            path: { "${params.outdir}/genome/filtered" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'CHROMSIZES' {
        publishDir  = [
            path: { "${params.outdir}/genome" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'BWA_INDEX' {
        ext.args    = '-a bwtsw'
        publishDir  = [
            path: { "${params.outdir}/genome/bwa_index" },
            enabled: params.publish_genome
        ]
    }

    withName: 'GENMAP_INDEX' {//no publish
        publishDir  = [
            path: { "${params.outdir}/genome/genmap_index" },
            enabled: false
        ]
    }

    withName: 'GENMAP_MAPPABILITY' {//no publish
        ext.args    = { "-K 50 -E 2 -w -T ${task.cpus}" }
        publishDir  = [
            path: { "${params.outdir}/genome/mappability" },
            enabled: false
        ]
    }

    withName: 'UCSC_WIGTOBIGWIG' {//publish mappability here
        publishDir  = [
            path: { "${params.outdir}/genome/mappability" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.publish_mappability
        ]
    }

    withName: 'GTF2BED' {
        publishDir  = [
            enabled: false
        ]
    }

    withName: 'GFFREAD' {
        publishDir  = [
            enabled: false
        ]
    }

    withName: 'GUNZIP_GTF' {
        publishDir  = [
            enabled: false
        ]
    }
    withName: GUNZIP_GFF {
        publishDir  = [
            enabled: false
        ]
    }

    withName: 'GUNZIP_GENE_BED' {
        publishDir  = [
            enabled: false
        ]
    }

    withName: 'GUNZIP_ADDITIONAL_FASTA' {
        publishDir  = [
            enabled: false
        ]
    }

    withName: 'BIOC_SUBSETLOOPS' {
        publishDir  = [
            enabled: false
        ]
    }

    withName: 'BEDPE2BED' {
        publishDir  = [
            enabled: false
        ]
    }
}

if(!params.skip_cutadapt){
    process {
        withName: 'CUTADAPT_5END' {
            ext.args    = { "-Z -e ${params.cutadapt_error_tolerance} --no-indels --action ${params.cutadapt_action} --discard-untrimmed -g ${params.cutadapt_5end}" }
            publishDir  = [
                enabled: false
            ]
        }
    }
    process {
        withName: 'CUTADAPT_3END' {
            ext.args    = { "-Z --no-indels --action trim -a ${params.cutadapt_3end} -A ${params.cutadapt_3end} -n 2 --minimum-length ${params.cutadapt_minimum_length} --untrimmed-o ${meta.id}_3.trim.fastq.gz --untrimmed-paired-output ${meta.id}_4.trim.fastq.gz" }
            publishDir  = [
                enabled: false
            ]
        }
    }
    process {
        withName: 'CAT_CUTADAPT_R1' {
            ext.prefix  = { "${meta.id}_R1.trim.fastq.gz" }
            publishDir  = [
                enabled: false
            ]
        }
    }
    process {
        withName: 'CAT_CUTADAPT_R2' {
            ext.prefix  = { "${meta.id}_R2.trim.fastq.gz" }
            publishDir  = [
                enabled: false
            ]
        }
    }
}

// mapping
process {
    withName: 'BWA_MEM' {//not output, need to be merged and sorted
        time        = { check_max( 32.h  * task.attempt, 'time'    ) }
        ext.args    = '-SP' //skip mate rescue and pairing
        ext.args2   = '-bhS' // for samtools view
        publishDir  = [
            enabled: false
        ]
    }
    withName: 'SAMTOOLS_MERGE' {//not output, output when bam_stats
        publishDir  = [
            enabled: false
        ]
    }
    //bam_stats.nf
    withName: 'SAMTOOLS_SORT' {//bam_stats, start from sorting
        ext.prefix  = { "${meta.id}.srt" }
        ext.args    = { "-m ${(task.memory.mega*0.8/task.cpus).intValue()}M" }
        publishDir  = [
            path: { "${params.outdir}/bwa/mapped/bam" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: 'SAMTOOLS_INDEX' {
        publishDir  = [
            path: { "${params.outdir}/bwa/mapped/bam" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: 'SAMTOOLS_STATS' {//bam_stats
        publishDir  = [
            path: { "${params.outdir}/bwa/mapped/QC" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: 'SAMTOOLS_FLAGSTAT' {//bam_stats
        publishDir  = [
            path: { "${params.outdir}/bwa/mapped/QC" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: 'SAMTOOLS_IDXSTATS' {//bam_stats
        publishDir  = [
            path: { "${params.outdir}/bwa/mapped/QC" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
}

// pairtools.nf, filter reads, output pair (like hic pair), raw (pair), and stats
process {
    withName: 'PAIRTOOLS_PARSE' {
        ext.args    = { "${params.pairtools_parse_params}" }
        publishDir  = [
            path: { "${params.outdir}/pairs/raw" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.publish_raw_pairsam
        ]
    }
    withName: 'PAIRTOOLS_PARSE2' {
        ext.args    = { "${params.pairtools_parse2_params}" }
        publishDir  = [
            path: { "${params.outdir}/pairs/raw" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.publish_raw_pairsam
        ]
    }
    withName: 'PAIRTOOLS_SAMPLE' {
        ext.args    = '--seed 123'
        publishDir  = [
            path: { "${params.outdir}/pairs/raw" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.publish_raw_pairsam
        ]
    }
    withName: 'PAIRTOOLS_STATS' {
        publishDir  = [
            path: { "${params.outdir}/pairs/QC" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: 'PAIRTOOLS_FLIP' {
        ext.args    = { "--nproc-in ${task.cpus} --nproc-out ${task.cpus}" }
        publishDir  = [
            enabled: false
        ]
    }
    withName: 'PAIRTOOLS_SELECT_VP' {// select valid pairs
        ext.args    = "(pair_type=='UU') or (pair_type=='UR') or (pair_type=='RU')"
        publishDir  = [
            enabled: false
        ]
    }
    withName: 'PAIRTOOLS_SORT' {// sort the valid pairs
        ext.prefix  = { "${meta.id}.sorted" }
        ext.args    = "--tmpdir ./"
        publishDir  = [
            enabled: false
        ]
    }
    withName: 'PAIRTOOLS_DEDUP' {// remove duplicate pairs
        ext.args    = '--max-mismatch 1 --method max'
        ext.prefix  = { "${meta.id}.dedup" }
        publishDir  = [
            enabled: false
        ]
    }
    withName: 'PAIRTOOLS_RESTRICT' {//Assign restriction fragments to pairs
        ext.prefix  = { "${meta.id}.restrict" }
        publishDir  = [
            enabled: false
        ]
    }
    withName: 'PAIRTOOLS_SELECT_LONG' {//publish valid.pairs
        ext.args    = '(COLS[-6]==COLS[-3]) and (chrom1==chrom2)'
        publishDir  = [
            path: { "${params.outdir}/pairs/filtered/unsorted_unflipped_raw" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename.contains('unselected.pairs.gz') ? filename.replace('unselected', 'valid.pairs') : filename.replace('selected', 'samefrag.pairs') },
            enabled: params.publish_raw_pairsam
        ]
    }
    withName: 'BIOC_PAIRS2HDF5' {
        ext.when    = { params.call_high_peak && params.method.toLowerCase()=="hicar" }
        ext.args    = { params.remove_dup ? '' : '--keep-dup' }
        publishDir  = [
            path: { "${params.outdir}/pairs/filtered" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.publish_filtered_h5
        ]
    }
    withName: 'PAIRIX' {//index for valid.pairs
        publishDir  = [
            path: { "${params.outdir}/pairs/filtered" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.publish_filtered_pairs
        ]
    }
    withName: 'READS_STAT' {
        publishDir  = [
            path: { "${params.outdir}/pairs/QC" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: 'READS_SUMMARY' {
        publishDir  = [
            path: { "${params.outdir}/pairs/QC" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: 'PAIRSQC' {
        publishDir  = [
            path: { "${params.outdir}/pairs/QC" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: 'PAIRSPLOT' {
        publishDir  = [
            path: { "${params.outdir}/pairs/QC" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: 'DUMP4HOMER' {//prepare for makeTagDirectory
        ext.when    = { params.interactions_tool=="homer" || params.tad_tool=="homer" || params.compartments_tool=="homer" || params.da_tool=="homer" }
        publishDir  = [
            path: { "${params.outdir}/matrix/homer/tag_summary" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
}

// cooler.nf: create cooler file and dump long_bedpe for downstream loop calling
process {
    withName: 'COOLER_LOAD' {
        ext.args    = '-f bg2 --count-as-float'
        publishDir  = [
            enabled: false
        ]
    }
    withName: 'COOLER_CLOAD' {
        ext.prefix  = { "${meta.id}.${cool_bin}" }
        ext.args    = 'pairix --max-split 2'
        publishDir  = [
            enabled: false
        ]
    }
    withName: 'COOLER_MERGE' {
        ext.prefix  = { "${meta.id}${meta.bin}" }
        publishDir  = [
            path: { "${params.outdir}/matrix/merge" },
            enabled: false
        ]
    }
    withName: 'COOLER_BALANCE' {
        ext.args    = '--cis-only'
        publishDir  = [
            path: { "${params.outdir}/matrix/balance" },
            enabled: false
        ]
    }
    withName: 'COOLER_ZOOMIFY' {
        ext.prefix  = { "${meta.id}${meta.bin}" }
        ext.args    = { "--balance -r ${meta.bin}N" }
        publishDir  = [
            path: { "${params.outdir}/matrix/mcool" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: 'COOLER_DUMP_PER_GROUP' {
        ext.args    = '-t pixels -H --join'
        publishDir  = [
            enabled: false
        ]
    }
    withName: 'COOLER_DUMP_PER_SAMPLE' {
        ext.args    = '-t pixels -H --join'
        publishDir  = [
            enabled: false
        ]
    }
    withName: 'DUMPREADS_PER_GROUP' {// dump long intra reads for each group for maps
        publishDir  = [
            path: { "${params.outdir}/pairs/long_reads/byGroup" },
            enabled: false
        ]
    }
    withName: 'DUMPREADS_PER_SAMPLE' {// dump long intra reads for each samples for differential analysis
        publishDir  = [
            path: { "${params.outdir}/pairs/long_reads/bySample" },
            enabled: false
        ]
    }
    withName: 'JUICER_PRE' {//convert to .hic file
        ext.args    = '-k KR'
        publishDir  = [
            path: { "${params.outdir}/matrix/hic" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
}

// callatacpeak.nf: calling ATAC peaks for R2 reads
process {
    withName: 'PAIRTOOLS_SELECT_SHORT' {// extract ATAC reads, split the pairs into longRange_Trans pairs (unselected) and short pairs (selected)
        ext.args    = '(chrom1==chrom2) and (abs(pos1 - pos2) < 1e4)'
        ext.prefix  = { "${meta.id}.short" }
        publishDir  = [
            path: { "${params.outdir}/pairs/filtered/short" },
            enabled: false
        ]
    }
    withName: 'SHIFT_READS' {// shift Tn5 insertion for longRange_Trans pairs
        publishDir  = [
            path: { "${params.outdir}/atac_peak/shifted_R2_reads" },
            enabled: false
        ]
    }
    withName: 'MERGE_READS' {// merge the read in same group
        ext.prefix  = { "${meta.id}.merged.ATAC" }
        publishDir  = [
            path: { "${params.outdir}/atac_peak/merged_R2_reads" },
            enabled: false
        ]
    }
    withName: 'BEDTOOLS_GENOMECOV_PER_GROUP' {// if user defined 1D peaks
        publishDir  = [
            path: { "${params.outdir}/prefined1Dpeak/peaks_per_Group" },
            enabled: false
        ]
    }
    withName: 'MACS2_CALLPEAK' {// call ATAC narrow peaks for group
        ext.args    = { [
            "--format BED",
            "--shift ${params.shiftsize}",
            "--extsize ${params.smooth_window}",
            "--nomodel -B ",
            "--SPMR",
            "--keep-dup all",
            "--call-summits",
            "--qval ${params.qval_thresh}"
        ].join(' ').trim() }
        publishDir  = [
            path: { "${params.outdir}/atac_peak/peaks_per_Group" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: 'MERGE_PEAK' {// merge all the called peaks
        publishDir  = [
            path: { "${params.outdir}/atac_peak/merged_peaks" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: 'ATACQC' {// ATAC QC
        ext.args    = '--pattern .merged.ATAC.bed.gz'
        publishDir  = [
            path: { "${params.outdir}/atac_peak/QC" },
            mode: params.publish_dir_mode,
            saveAs: {filename -> filename.equals('versions.yml') ? null : filename}
        ]
    }
    withName: 'DUMP_READS_PER_GROUP' {// dump ATAC reads for each group for maps
        publishDir  = [
            path: { "${params.outdir}/pairs/R2_reads/byGroup" },
            enabled: false
        ]
    }
    withName: 'BEDFILES_SORT_PER_GROUP' {// sort the bedgraph output from macs2
        ext.prefix  = { "${meta.id}.srt" }
        publishDir  = [
            enabled: false
        ]
    }
    withName: 'UCSC_BEDCLIP' {// clip the bed file output from macs2
        ext.prefix  = { "${meta.id}.clip" }
        publishDir  = [
            enabled: false
        ]
    }
    withName: 'UCSC_BEDGRAPHTOBIGWIG_PER_GROUP' {// output bigwig
        publishDir  = [
            path: { "${params.outdir}/atac_peak/R2_bigwig/byGroup" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    // dump R2 reads for differential analysis
    withName: 'DUMP_READS_PER_SAMPLE' {// dump ATAC reads for each samples for differential analysis
        publishDir  = [
            path: { "${params.outdir}/pairs/R2_reads/bySample" },
            enabled: false
        ]
    }
    withName: 'BEDTOOLS_GENOMECOV_PER_SAMPLE' {// convert bed to bedgraph
        ext.args    = '-bga -split'
        publishDir  = [
            enabled: false
        ]
    }
    withName: 'BEDFILES_SORT_PER_SAMPLE' {// sort the bedgraph
        ext.prefix  = { "${meta.id}.srt" }
        publishDir  = [
            enabled: false
        ]
    }
    withName: 'UCSC_BEDGRAPHTOBIGWIG_PER_SAMPLE' {// output bigwig
        publishDir  = [
            path: { "${params.outdir}/atac_peak/R2_bigwig/Tn5InsSitesBySample" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
}

// call interactions/loops
process {
    withName: 'MERGE_INTERACTIONS' {
        publishDir  = [
            path: { "${params.outdir}/interactions/${params.interactions_tool}/merged" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
}

// MAPS call interactions: step1, prepare enzyme cut map; step2, fit model
process {
    // step1: prepare background, multienzyme.nf
    withName: 'BIOC_ENZYMECUT' {
        publishDir  = [
            enabled: false
        ]
    }
    withName: 'MAPS_CUT' {
        publishDir  = [
            enabled: false
        ]
    }
    withName: 'MAPS_FEND' {//fix end, by bedtools slop, here are fixed -l 0 -r fragment size;
        ext.args    = '-s -l 0' // parameters for bedtools/slop, please do not modify.
        publishDir  = [
            enabled: false
        ]
    }
    withName: 'SEQLEVELS_STYLE' {//no publish
        publishDir  = [
            enabled: false
        ]
    }
    withName: 'ENSEMBL_UCSC_CONVERT1' {//no publish, convert to UCSC style
        ext.args    = 'toUCSC'
        publishDir  = [
            enabled: false
        ]
    }
    withName: 'ENSEMBL_UCSC_CONVERT2' {//no publish, convert to UCSC style
        ext.args    = 'toUCSC'
        publishDir  = [
            enabled: false
        ]
    }
    withName: 'MAPS_MERGE' {
        ext.args    = { "$params.restriction_sites_cut_off" }
        publishDir  = [
            enabled: false
        ]
    }
    withName: 'MAPS_FEATURE' {
        publishDir  = [
            path: { "${params.outdir}/genome/MAPS_digest" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    // step2: maps_peak.nf
    withName: 'MAPS_MAPS' {// create parameter table
        ext.args    = { $params.maps_prepare_trans?'NA --BINNING_RANGE 100000000 --PREPARE_TRANS':'NA --BINNING_RANGE 100000000' } //sex_chroms_to_process --BINNING_RANGE trans-interaction?
        publishDir  = [
            path: { "${params.outdir}/interactions/maps/parameters" },
            enabled: false
        ]
    }
    withName: 'MAPS_CALLPEAK' {// regression and peak calling
        ext.args    = {
            [
                params.maps_cutoff_counts,
                params.maps_cutoff_fold_change,
                params.maps_cutoff_fdr,
                params.maps_filter,
                params.maps_model
            ].join(' ').trim()
        } // cutoff_counts cutoff_fold_change filter model
        publishDir  = [
            path: { "${params.outdir}/interactions/maps" },
            enabled: false
        ]
    }
    withName: 'MAPS_STATS' {// stats
        publishDir  = [
            path: { "${params.outdir}/interactions/maps" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: 'MAPS_REFORMAT' {// reformat
        publishDir  = [
            path: { "${params.outdir}/interactions/maps" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: true
        ]
    }
    withName: 'MAPS_RAW2BG2' {
        publishDir  = [
            path: { "${params.outdir}/matrix/mcool/maps" },
            enabled: false
        ]
    }
    withName: 'COOLER_ZOOMIFY_MAPS' {// create mcooler file for visualization
        ext.prefix  = { "${meta.id}${meta.bin}" }
        ext.args    = { "-r ${meta.bin}N" }
        publishDir  = [
            path: { "${params.outdir}/matrix/mcool/maps" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
}

// HiC-DC+ interactions: step1, prepare features; step2, call significant interactions
process {
    withName: 'HICDCPLUS_FEATURES' {
        publishDir  = [
            path: { "${params.outdir}/genome/hicdcplus_features" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    // step2: callloops.nf
    withName: 'HICDCPLUS_CALL_LOOPS' {
        ext.args    = { "--fdr $params.hicdcplus_cutoff_fdr" }
        publishDir  = [
            path: { "${params.outdir}/interactions/hicdcplus" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
}

// peakachu interactions: step1, generate the model url; step2, call significant interactions
process {
    withName: 'PEAKACHU_MODEL' {
        publishDir  = [
            enabled: false
        ]
    }
    withName: 'PEAKACHU_SCORE' {
        publishDir  = [
            path: { "${params.outdir}/interactions/peakachu" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
}

// Homer
process {
    withName: 'CAT_HOMER' {
        publishDir  = [
            enabled: false
        ]
    }
    withName: 'HOMER_MAKETAGDIRECTORY' {//makeTagDirectory `-d parameter doesnot work`
        ext.args    = '-format HiCsummary'
        publishDir  = [
            path: { "${params.outdir}/matrix/homer/tag_directory" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: 'HOMER_FINDTADSANDLOOPS'{// new method to call interactions, ask genome pre-installed
        ext.args    = '-res 2000'
        publishDir  = [
            path: { "${params.outdir}/interactions/homer" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: 'HOMER_FINDTADSANDLOOPS_TADS'{// new method to call interactions
        ext.args    = '-res 2000'
        publishDir  = [
            path: { "${params.outdir}/tads/homer" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: 'HOMER_INSTALL'{//prepare for homer genome
        publishDir  = [
            enabled: false
        ]
    }
    withName: 'HOMER_RUNHICPCA'{//prepare for compartments
        publishDir  = [
            path: { "${params.outdir}/compartments/homer/pca" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: 'HOMER_FINDHICCOMPARTMENTS'{//compartments
        publishDir  = [
            path: { "${params.outdir}/compartments/homer/compartments" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: 'UCSC_BEDGRAPHTOBIGWIG_HOMER_COMPARTMENTS'{//compartments bigwig file
        publishDir  = [
            path: { "${params.outdir}/compartments/homer/compartments" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: true
        ]
    }
    withName: 'HOMER_FINDMOTIFSGENOME'{
        publishDir = [
            path: { "${params.outdir}/tfea/homer/findMotifsGenome" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
}

// cooltools
process {
    withName: 'COOLTOOLS_EIGSCIS'{//call compartments
        ext.args    = '--bigwig'
        publishDir  = [
            path: { "${params.outdir}/compartments/${params.compartments_tool}/compartments" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: 'COOLTOOLS_INSULATION'{//call tads
        ext.args    = '--bigwig --verbose'
        publishDir  = [
            path: { "${params.outdir}/tads/cooltools/insulation" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: 'COOLTOOLS_PILEUP'{//call apa
        ext.args    = '--features-format BED'
        publishDir  = [
            path: { "${params.outdir}/apa/cooltools/pileup" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: 'PLOTNPZ_BY_COOLTOOLS'{//plot apa
        publishDir  = [
            path: { "${params.outdir}/apa/cooltools" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: 'VIRTUAL4C_BY_COOLTOOLS'{//virtual_4c
        publishDir  = [
            path: { "${params.outdir}/v4c/cooltools" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
}

// HiCExplorer
process {
    // norm
    //withName: 'HICEXPLORER_HICCORRECTMATRIX' {//NOT work, buggy
    //    ext.args    = '--correctionMethod KR'
    //    publishDir  = [
    //        path: { "${params.outdir}/matrix/HiCExplorer" },
    //        mode: params.publish_dir_mode,
    //        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    //    ]
    //}
    // A/B Compartments
    withName: 'HICEXPLORER_HICPCA' {//call compartments
        ext.args    = '--format bigwig'
        publishDir  = [
            path: { "${params.outdir}/compartments/HiCExplorer/compartments" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: 'HICEXPLORER_HICTRANSFORM' {//prepare for plot
        ext.args    = '--method pearson --perChromosome'
        publishDir  = [
            path: { "${params.outdir}/compartments/HiCExplorer/plots" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: 'HICEXPLORER_HICPLOTMATRIX_PCA1' {//plot compartments by pca1
        ext.args    = { "--perChromosome --bigwig ${additional_files}" }
        ext.prefix  = { "${meta.id}_pca1" }
        publishDir  = [
            path: { "${params.outdir}/compartments/HiCExplorer/plots" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: 'HICEXPLORER_HICPLOTMATRIX_PCA2' {//plot compartments by pca2
        ext.args    = { "--perChromosome --bigwig ${additional_files}" }
        ext.prefix  = { "${meta.id}_pca2" }
        publishDir  = [
            path: { "${params.outdir}/compartments/HiCExplorer/plots" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    // TADs
    withName: 'HICEXPLORER_HICFINDTADS' {//cal tads
        ext.args    = '--correctForMultipleTesting None'
        publishDir  = [
            path: { "${params.outdir}/tads/HiCExplorer" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: 'HICEXPLORER_HICPLOTTADS' {//plot tads
        publishDir  = [
            path: { "${params.outdir}/tads/HiCExplorer/plots" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    // Differential analysis
    withName: 'RECENTER_PEAK' {
        publishDir = [
            enabled: false
        ]
    }
    withName: 'HICEXPLORER_CHICQUALITYCONTROL' {
        ext.args    = '--sparsity 0.025'
        publishDir  = [
            path: { "${params.outdir}/differential_analysis/HiCExplorer" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: 'HICEXPLORER_CHICVIEWPOINTBACKGROUNDMODEL' {
        ext.args    = '--fixateRange 500000'
        publishDir  = [
            path: { "${params.outdir}/differential_analysis/HiCExplorer" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: 'HICEXPLORER_CHICVIEWPOINT' {// fixateRange must keep same as build background
        ext.args    = '--fixateRange 500000 --averageContactBin 5 --range 1000000 1000000'
        publishDir  = [
            path: { "${params.outdir}/differential_analysis/HiCExplorer" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: 'HICEXPLORER_CHICSIGNIFICANTINTERACTIONS' {// range should be <= range in chicViewpoint, set peak_interactions_threshold to 1 for test run
        ext.args    = { "--range 1000000 1000000 --pValue $params.enrichment_fdr --loosePValue 0.1 --peakInteractionsThreshold $params.peak_interactions_threshold" }
        publishDir  = [
            path: { "${params.outdir}/differential_analysis/HiCExplorer" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: 'HICEXPLORER_CHICAGGREGATESTATISTIC' {
        publishDir  = [
            path: { "${params.outdir}/differential_analysis/HiCExplorer" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: 'HICEXPLORER_CHICDIFFERENTIALTEST' {
        ext.args    = { "--alpha $params.enrichment_fdr --statisticTest fisher" }
        publishDir  = [
            path: { "${params.outdir}/differential_analysis/HiCExplorer" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    //virtual_4c
    withName: 'HICEXPLORER_CHICPLOTVIEWPOINT'{//range should be <= range in chicSignificantInteractions
        ext.args    = '--combinationMode dual --range 500000 500000 --pValue'
        publishDir  = [
            path: { "${params.outdir}/v4c/HiCExplorer" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    //Aggregate peak analysis
    withName: 'HICEXPLORER_HICAGGREGATECONTACTS' {//apa
        ext.args    = '--vMin 0.2 --vMax 2.2 --range 200000:1000000 --numberOfBins 51 --operationType mean --transform obs/exp --mode intra-chr'
        publishDir  = [
            path: { "${params.outdir}/apa/HiCExplorer" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
}

// JUICER
process {
    withName: 'JUICER_ADDNORM'{//add normalization
        ext.args    = { "-k ${params.juicer_norm_method}" }
        publishDir  = [
            path: { "${params.outdir}/matrix/hic" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: 'JUICER_EIGENVECTOR'{//call compartments
        ext.args    = { "-p ${params.juicer_norm_method}" }
        publishDir  = [
            path: { "${params.outdir}/compartments/${params.compartments_tool}/compartments" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: 'UCSC_BEDGRAPHTOBIGWIG_JUICER_EIGENVECTOR'{//convet compartments txt file to bigwig file
        publishDir  = [
            path: { "${params.outdir}/compartments/${params.compartments_tool}/compartments" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: 'JUICER_APA'{//call apa
        ext.args    = { "-k ${params.juicer_norm_method} -u" }
        publishDir  = [
            path: { "${params.outdir}/apa/juicebox" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
}

// Call_hipeak.nf: call high resolution interactions
// Step1: call peak for R1,
// Step2: call interactions among R1 peaks and R2 peaks
process {
    // Step1: fragment_peak.nf: call fragment R1 reads peaks
    withName: 'R1READS' {// extract R1 reads
        publishDir  = [
            path: { "${params.outdir}/fragment_peak/R1_reads" },
            enabled: false
        ]
    }
    withName: 'MERGE_R1READS' {// merge the read in same group
        ext.prefix  = { "${meta.id}.merged.R1" }
        publishDir  = [
            path: { "${params.outdir}/fragment_peak/merged_R1_reads" },
            enabled: false
        ]
    }
    withName: 'CALL_R1PEAK' {// call R1 narrow peaks for group
        publishDir  = [
            path: { "${params.outdir}/fragment_peak/peaks_per_Group" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: 'MERGE_R1PEAK' {// merge all the called peaks
        publishDir  = [
            path: { "${params.outdir}/fragment_peak/merged_peaks" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: 'DUMP_R1_READS_PER_GROUP' {// dump fragment reads for each group for maps
        publishDir  = [
            path: { "${params.outdir}/pairs/R1_reads/byGroup" },
            enabled: false
        ]
    }
    withName: 'UCSC_BEDGRAPHTOBIGWIG_PER_R1_GROUP' {// output bigwig
        publishDir  = [
            path: { "${params.outdir}/fragment_peak/R1_bigwig/byGroup" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: 'DUMP_R1_READS_PER_SAMPLE' {// dump ATAC reads for each samples for differential analysis
        publishDir  = [
            path: { "${params.outdir}/pairs/R1_reads/bySample" },
            enabled: false
        ]
    }
    withName: 'BEDTOOLS_GENOMECOV_PER_R1_SAMPLE' {// convert bed to bedgraph
        ext.args    = '-bga -split'
        publishDir  = [
            enabled: false
        ]
    }
    withName: 'UCSC_BEDGRAPHTOBIGWIG_PER_R1_SAMPLE' {// output bigwig
        publishDir  = [
            path: { "${params.outdir}/fragment_peak/R1_bigwig/pos1" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: 'BEDPE2BED_HI' {
        publishDir  = [
            enabled: false
        ]
    }
    withName: 'BEDPE2BED_DIFF' {
        publishDir  = [
            enabled: false
        ]
    }
    // Step2: call_hipeak
    withName: 'PREPARE_COUNTS' {// prepare counts for R1 and R2 peaks combination
        ext.args    = { "--peak_pair_block ${params.peak_pair_block} --snow_type ${params.snow_type} --counts_filter ${params.min_counts_per_loop}" }
        publishDir  = [
            path: { "${params.outdir}/high_peak" },
            enabled: false
        ]
    }
    withName: 'POST_COUNTS' {// add additional information to the peaks for interaction calling
        publishDir  = [
            path: { "${params.outdir}/high_peak" },
            enabled: false
        ]
    }
    withName: 'CALL_HIPEAK' {// call peaks by pospoisson or negbinom regression
        ext.args    = { "--regression_type ${params.maps_model}" }
        publishDir  = [
            path: { "${params.outdir}/high_peak" },
            enabled: false
        ]
    }
    withName: 'ASSIGN_TYPE' {// assign peak types
        ext.args    = { "--count_cutoff ${params.maps_cutoff_counts} --ratio_cutoff ${params.maps_cutoff_fold_change} --fdr ${params.maps_cutoff_fdr}" }
        publishDir  = [
            path: { "${params.outdir}/high_peak" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
}

// differential compartments analysis
process {
    withName: 'ADJUST_COMPARTMENTS'{//A/B switched compartment bigwig file
        publishDir  = [
            path: { "${params.outdir}/compartments/${params.compartments_tool}/adjusted_compartments" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: true
        ]
    }
    withName: 'DIFFERENTIAL_COMPARTMENTS'{//differential analysis by compartment bigwig file
        publishDir  = [
            path: { "${params.outdir}/compartments/${params.compartments_tool}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: true
        ]
    }
}

// Downstream analysis
// Differential analysis
process {
    //diffhicar
    withName: 'DIFFHICAR' {
        publishDir  = [
            path: { "${params.outdir}/differential_analysis/edgeR/${params.interactions_tool}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    //diffhic
    withName: 'DIFFHIC' {
        publishDir  = [
            path: { "${params.outdir}/differential_analysis/diffHic/${params.interactions_tool}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    //diffset
    withName: 'DIFFSET' {
        publishDir  = [
            path: { "${params.outdir}/differential_analysis/setOperation/${params.interactions_tool}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: 'DIFF_HIPEAK' {
        ext.args    = { "--snow_type ${params.snow_type}" }
        ext.prefix  = 'edgeR_DiffHiPeak'
        publishDir  = [
            path: { "${params.outdir}/differential_analysis" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
}
// Annotation
process {
    withName: 'BIOC_CHIPPEAKANNO' {
        publishDir  = [
            path: { "${params.outdir}/annotations" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: 'BIOC_CHIPPEAKANNO_HIPEAK' {
        ext.prefix  = 'anno_HiPeak'
        publishDir  = [
            path: { "${params.outdir}/high_peak" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: 'BIOC_CHIPPEAKANNO_DIFFHIPEAK' {
        ext.prefix  = 'edgeR_DiffHiPeak'
        publishDir  = [
            path: { "${params.outdir}/differential_analysis" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
}
// Enrichment analysis
process {
    withName: 'BIOC_ENRICH' {
        ext.prefix  = { "edgeR_bin${bin_size}" }
        ext.args    = "-q $params.enrichment_fdr"
        publishDir  = [
            path: { "${params.outdir}/differential_analysis" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
}
// TFEA other tools
process {
    withName: 'BIOC_ATACSEQTFEA' {// ATACseqTFEA
        publishDir  = [
            path: { "${params.outdir}/tfea/ATACseqTFEA" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
}
// Visualization
process{
    withName: 'BIOC_TRACKVIEWER' {// virtual_4c
        ext.args    = { "--maxevents $params.v4c_max_events" }
        publishDir  = [
            path: { "${params.outdir}/v4c/trackViewer" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: 'IGV' {// IGV
        publishDir  = [
            path: { "${params.outdir}/igv.js" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: 'CIRCOS_PREPARE' {
        ext.args    = '--totalLinks 24000'// if you increase this number, please also try to increase the number in housekeeping.conf
        publishDir  = [
            path: { "${params.outdir}/circos" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: 'CIRCOS' {
        ext.prefix  = { "${meta.id}_${meta.bin}_${params.interactions_tool}_${params.tad_tool}_${params.compartments_tool}" }
        publishDir  = [
            path: { "${params.outdir}/circos" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
}
// contamination
process{
    withName: 'KRAKEN2_KRAKEN2' {// KRAKEN2
        ext.args = "--report-minimizer-data"
        publishDir = [
            path: { "${params.outdir}/kraken2/" },
            mode: params.publish_dir_mode,
            pattern: '*.{txt,fastq.gz}'
        ]
    }
    withName: KRAKENTOOLS_COMBINEKREPORTS {
        ext.prefix = { "kraken2_${meta.id}_combined_reports" }
        publishDir = [
            path: { "${params.outdir}/kraken2/" },
            mode: params.publish_dir_mode,
            pattern: '*.txt'
        ]
    }
    withName: KRAKENTOOLS_KREPORT2KRONA {
        publishDir = [
            path: { "${params.outdir}/kraken2/krakentools/" },
            mode: params.publish_dir_mode,
            enabled: false
        ]
    }
    withName: KRONA_KTIMPORTTEXT {
        publishDir = [
            path: { "${params.outdir}/kraken2/krona/" },
            mode: params.publish_dir_mode,
            pattern: '*.{html}'
        ]
    }
    withName: UNTAR {
        publishDir = [
            path: { "${params.outdir}/kraken2/kraken2_db/" },
            mode: params.publish_dir_mode,
            enabled: false
        ]
    }
}
