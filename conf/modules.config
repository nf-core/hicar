/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {
    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        enabled: false
    ]

    withName: 'SAMPLESHEET_CHECK' {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'CHECKSUMS'{
        publishDir = [
            path: { "${params.outdir}/checksums" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'FASTQC' {
        ext.args   = '--quiet'
        publishDir = [
            path: { "${params.outdir}/fastqc" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'MULTIQC' {
        ext.args   = { params.multiqc_config ? "--config $multiqc_custom_config" : '' }
        publishDir = [
            path: { "${params.outdir}/multiqc" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'CUTADAPT' {
        ext.args    = { "-Z -e 0 --no-indels --action none --discard-untrimmed -g ${params.restriction_sites}" }
        publishDir  = [
            enabled: false
        ]
    }
    //preparegenome.nf
    withName: 'COOLER_DIGEST' {
        publishDir  = [
            path: { "${params.outdir}/genome/digest" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: 'GENOME_FILTER' {
        publishDir  = [
            path: { "${params.outdir}/genome/filtered" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: 'CHROMSIZES' {
        publishDir  = [
            path: { "${params.outdir}/genome" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: 'BWA_INDEX' {
        ext.args    = '-a bwtsw'
        publishDir  = [
            path: { "${params.outdir}/genome/bwa_index" },
            enabled: false
        ]
    }
    withName: 'GTF2BED' {
        publishDir  = [
            enabled: false
        ]
    }
    withName: 'GFFREAD' {
        publishDir  = [
            enabled: false
        ]
    }
    withName: 'GUNZIP' {
        publishDir  = [
            enabled: false
        ]
    }
    withName: 'GUNZIP_GTF' {
        publishDir  = [
            enabled: false
        ]
    }
    withName: GUNZIP_GFF {
        publishDir  = [
            enabled: false
        ]
    }
    withName: 'GUNZIP_GENE_BED' {
        publishDir  = [
            enabled: false
        ]
    }
    withName: 'GUNZIP_ADDITIONAL_FASTA' {
        publishDir  = [
            enabled: false
        ]
    }
    withName: 'UCSC_BIGWIGAVERAGEOVERBED' {
        publishDir  = [
            enabled: false
        ]
    }
    withName: 'BWA_MEM' {//not output, need to be merged and sorted
        ext.args    = '-SP' //skip mate rescue and pairing
        ext.args2   = '-bhS' // for samtools view
        publishDir  = [
            enabled: false
        ]
    }
    withName: 'SAMTOOLS_MERGE' {//not output, output when bam_stats
        publishDir  = [
            enabled: false
        ]
    }
    //bam_stats.nf
    withName: 'SAMTOOLS_SORT' {//bam_stats, start from sorting
        ext.prefix  = { "${meta.id}.srt" }
        publishDir  = [
            path: { "${params.outdir}/bwa/mapped/bam" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: 'SAMTOOLS_INDEX' {
        publishDir  = [
            path: { "${params.outdir}/bwa/mapped/bam" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: 'SAMTOOLS_STATS' {//bam_stats
        publishDir  = [
            path: { "${params.outdir}/bwa/mapped/QC" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: 'SAMTOOLS_FLAGSTAT' {//bam_stats
        publishDir  = [
            path: { "${params.outdir}/bwa/mapped/QC" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: 'SAMTOOLS_IDXSTATS' {//bam_stats
        publishDir  = [
            path: { "${params.outdir}/bwa/mapped/QC" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    //pairtools.nf
    withName: 'PAIRTOOLS_PARSE' {
        ext.args    = '--min-mapq 10 --max-molecule-size 2000 --max-inter-align-gap 20 --walks-policy mask  --no-flip --drop-seq --drop-sam'
        publishDir  = [
            path: { "${params.outdir}/pairs/raw" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: 'PAIRTOOLS_FLIP' {
        publishDir  = [
            enabled: false
        ]
    }
    withName: 'PAIRTOOLS_SELECT' {// select valid pairs
        ext.args    = "(pair_type=='UU') or (pair_type=='UR') or (pair_type=='RU')"
        publishDir  = [
            enabled: false
        ]
    }
    withName: 'PAIRTOOLS_SORT' {// sort the valid pairs
        ext.prefix  = { "${meta.id}.sorted" }
        publishDir  = [
            enabled: false
        ]
    }
    withName: 'PAIRTOOLS_DEDUP' {// remove duplicate pairs
        ext.args    = '--max-mismatch 1 --method max'
        ext.prefix  = { "${meta.id}.dedup" }
        publishDir  = [
            enabled: false
        ]
    }
    withName: 'PAIRTOOLS_RESTRICT' {//Assign restriction fragments to pairs
        ext.prefix  = { "${meta.id}.restrict" }
        publishDir  = [
            enabled: false
        ]
    }
    withName: 'PAIRTOOLS_SELECT_LONG' {//publish valid.pairs
        ext.args    = '(COLS[-6]==COLS[-3]) and (chrom1==chrom2)'
        publishDir  = [
            path: { "${params.outdir}/pairs/filtered" },
            enabled: false
        ]
    }
    withName: 'BIOC_PAIRS2HDF5' {
        ext.args    = { params.remove_dup ? '' : '--keep-dup' }
        publishDir  = [
            path: { "${params.outdir}/pairs/filtered" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: 'PAIR2BAM' {
        publishDir  = [
            path: { "${params.outdir}/HiPeak/distalpair_in_peak_bams_4_igv" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: 'PAIRIX' {//index for valid.pairs
        publishDir  = [
            path: { "${params.outdir}/pairs/filtered" },
            enabled: false
        ]
    }
    withName: 'READS_STAT' {
        publishDir  = [
            path: { "${params.outdir}/pairs/QC" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: 'READS_SUMMARY' {
        publishDir  = [
            path: { "${params.outdir}/pairs/QC" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: 'PAIRSQC' {
        publishDir  = [
            path: { "${params.outdir}/pairs/QC" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: 'PAIRSPLOT' {
        publishDir  = [
            path: { "${params.outdir}/pairs/QC" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    //cooler.nf
    withName: 'COOLER_LOAD' {
        ext.args    = '-f bg2 --count-as-float'
        publishDir  = [
            enabled: false
        ]
    }
    withName: 'COOLER_CLOAD' {
        ext.args    = '--max-split 2'
        publishDir  = [
            enabled: false
        ]
    }
    withName: 'COOLER_MERGE' {
        publishDir  = [
            path: { "${params.outdir}/cooler/merge" },
            enabled: false
        ]
    }
    withName: 'COOLER_ZOOMIFY' {
        ext.args    = '--balance'
        publishDir  = [
            path: { "${params.outdir}/cooler/mcool" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: 'COOLER_DUMP_PER_GROUP' {
        ext.args    = '-t pixels -H --join'
        publishDir  = [
            enabled: false
        ]
    }
    withName: 'COOLER_DUMP_PER_SAMPLE' {
        ext.args    = '-t pixels -H --join'
        publishDir  = [
            enabled: false
        ]
    }
    withName: 'DUMPINTRAREADS_PER_GROUP' {// dump long intra reads for each group for maps
        publishDir  = [
            path: { "${params.outdir}/pairs/long_reads/byGroup" },
            enabled: false
        ]
    }
    withName: 'DUMPINTRAREADS_PER_SAMPLE' {// dump long intra reads for each samples for differential analysis
        publishDir  = [
            path: { "${params.outdir}/pairs/long_reads/bySample" },
            enabled: false
        ]
    }
    withName: 'JUICER' {//convert to .hic file
        publishDir  = [
            path: { "${params.outdir}/cooler/hic" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    //callatacpeak.nf
    withName: 'PAIRTOOLS_SELECT_SHORT' {// extract ATAC reads, split the pairs into longRange_Trans pairs (unselected) and short pairs (selected)
        ext.args    = '(chrom1==chrom2) and (abs(pos1 - pos2) < 1e4)'
        ext.prefix  = { "${meta.id}.short" }
        publishDir  = [
            path: { "${params.outdir}/pairs/filtered/short" },
            enabled: false
        ]
    }
    withName: 'SHIFT_READS' {// shift Tn5 insertion for longRange_Trans pairs
        publishDir  = [
            path: { "${params.outdir}/ATACpeak/shifted_R2_reads" },
            enabled: false
        ]
    }
    withName: 'MERGE_READS' {// merge the read in same group
        ext.prefix  = { "${meta.id}.merged.ATAC" }
        publishDir  = [
            path: { "${params.outdir}/ATACpeak/merged_R2_reads" },
            enabled: false
        ]
    }
    withName: 'MACS2_CALLPEAK' {// call ATAC narrow peaks for group
        ext.args    = { [
            "--format BED",
            "--shift ${params.shiftsize}",
            "--extsize ${params.smooth_window}",
            "--nomodel -B ",
            "--SPMR",
            "--keep-dup all",
            "--call-summits",
            "--qval ${params.qval_thresh}"
        ].join(' ').trim() }
        publishDir  = [
            path: { "${params.outdir}/ATACpeak/peaks_per_Group" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: 'MERGE_PEAK' {// merge all the called peaks
        publishDir  = [
            path: { "${params.outdir}/ATACpeak/merged_peaks" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: 'ATACQC' {// ATAC QC
        ext.args    = '--pattern .merged.ATAC.bed.gz'
        publishDir  = [
            path: { "${params.outdir}/ATACpeak/QC" },
            mode: params.publish_dir_mode,
            saveAs: {filename -> filename.equals('versions.yml') ? null : filename}
        ]
    }
    withName: 'DUMP_READS' {// dump ATAC reads for each group for maps
        publishDir  = [
            path: { "${params.outdir}/pairs/R2_reads/byGroup" },
            enabled: false
        ]
    }
    withName: 'DUMP_READS_PER_SAMPLE' {// dump ATAC reads for each samples for differential analysis
        publishDir  = [
            path: { "${params.outdir}/pairs/R2_reads/bySample" },
            enabled: false
        ]
    }
    withName: 'BEDTOOLS_GENOMECOV_PER_R1SAMPLE' {// convert bed to bedgraph
        ext.args    = '-bga -split'
        publishDir  = [
            enabled: false
        ]
    }
    withName: 'BEDTOOLS_GENOMECOV_PER_SAMPLE' {// convert bed to bedgraph
        ext.args    = '-bga -split'
        publishDir  = [
            enabled: false
        ]
    }
    withName: 'BEDFILES_SORT_PER_GROUP' {// sort the bedgraph
        ext.prefix  = { "${meta.id}.srt" }
        publishDir  = [
            enabled: false
        ]
    }
    withName: 'BEDFILES_SORT_PER_SAMPLE' {// sort the bedgraph
        ext.prefix  = { "${meta.id}.srt" }
        publishDir  = [
            enabled: false
        ]
    }
    withName: 'UCSC_BEDCLIP' {// clip the bed file output from macs2
        ext.prefix  = { "${meta.id}.clip" }
        publishDir  = [
            enabled: false
        ]
    }
    withName: 'UCSC_BEDGRAPHTOBIGWIG_PER_GROUP' {// output bigwig
        publishDir  = [
            path: { "${params.outdir}/ATACpeak/R2_bigwig/byGroup" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: 'UCSC_BEDGRAPHTOBIGWIG_PER_SAMPLE' {// output bigwig
        publishDir  = [
            path: { "${params.outdir}/ATACpeak/R2_bigwig/Tn5InsSitesBySample" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    // call fragment R1 reads peaks
    withName: 'R1READS' {// extract R1 reads
        publishDir  = [
            path: { "${params.outdir}/fragmentPeak/R1_reads" },
            enabled: false
        ]
    }
    withName: 'MERGE_R1READS' {// merge the read in same group
        ext.prefix  = { "${meta.id}.merged.R1" }
        publishDir  = [
            path: { "${params.outdir}/fragmentPeak/merged_R1_reads" },
            enabled: false
        ]
    }
    withName: 'CALL_R1PEAK' {// call R1 narrow peaks for group
        publishDir  = [
            path: { "${params.outdir}/fragmentPeak/peaks_per_Group" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: 'MERGE_R1PEAK' {// merge all the called peaks
        publishDir  = [
            path: { "${params.outdir}/fragmentPeak/merged_peaks" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: 'DUMP_R1_READS_PER_GROUP' {// dump ATAC reads for each group for maps
        publishDir  = [
            path: { "${params.outdir}/pairs/R1_reads/byGroup" },
            enabled: false
        ]
    }
    withName: 'DUMP_R1_READS_PER_SAMPLE' {// dump ATAC reads for each samples for differential analysis
        publishDir  = [
            path: { "${params.outdir}/pairs/R1_reads/bySample" },
            enabled: false
        ]
    }
    withName: 'UCSC_BEDGRAPHTOBIGWIG_PER_R1_GROUP' {// output bigwig
        publishDir  = [
            path: { "${params.outdir}/fragmentPeak/R1_bigwig/byGroup" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: 'UCSC_BEDGRAPHTOBIGWIG_PER_R1_SAMPLE' {// output bigwig
        publishDir  = [
            path: { "${params.outdir}/fragmentPeak/R1_bigwig/pos1" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    // prepare background, multienzyme.nf
    withName: 'MAPS_CUT' {
        publishDir  = [
            enabled: false
        ]
    }
    withName: 'MAPS_FEND' {//fix end, by bedtools slop, here are fixed -l 0 -r fragment size;
        ext.args    = '-s -l 0' // parameters for bedtools/slop, please do not modify.
        publishDir  = [
            enabled: false
        ]
    }
    withName: 'GENMAP_INDEX' {//no publish
        publishDir  = [
            enabled: false
        ]
    }
    withName: 'GENMAP_MAPPABILITY' {//no publish
        ext.args    = '-K 50 -E 2 -w'
        publishDir  = [
            enabled: false
        ]
    }
    withName: 'UCSC_WIGTOBIGWIG' {//publish mappability here
        publishDir  = [
            path: { "${params.outdir}/genome/mappability" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: 'SEQLEVELS_STYLE' {//no publish
        publishDir  = [
            enabled: false
        ]
    }
    withName: 'ENSEMBL_UCSC_CONVERT' {//no publish
        ext.args    = 'toUCSC'
        publishDir  = [
            enabled: false
        ]
    }
    withName: 'GENMAP_MAPPABILITY' {
        publishDir  = [
            enabled: false
        ]
    }
    withName: 'MAPS_MERGE' {
        ext.args    = { "$params.restriction_sites_cut_off" }
        publishDir  = [
            enabled: false
        ]
    }
    withName: 'MAPS_FEATURE' {
        publishDir  = [
            path: { "${params.outdir}/genome/digest" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    //maps_peak.nf
    withName: 'MAPS_MAPS' {
        ext.args    = 'NA --BINNING_RANGE 100000000' //sex_chroms_to_process --BINNING_RANGE
        publishDir  = [
            path: { "${params.outdir}/MAPSpeak/parameters" },
            enabled: false
        ]
    }
    withName: 'MAPS_CALLPEAK' {
        ext.args    = {
            [
                params.maps_cutoff_counts,
                params.maps_cutoff_fold_change,
                params.maps_cutoff_fdr,
                params.maps_filter,
                params.maps_model
            ].join(' ').trim()
        } // cutoff_counts cutoff_fold_change filter model
        publishDir  = [
            path: { "${params.outdir}/MAPSpeak" },
            enabled: false
        ]
    }
    withName: 'MAPS_STATS' {
        publishDir  = [
            path: { "${params.outdir}/MAPSpeak" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: 'MAPS_REFORMAT' {
        publishDir  = [
            path: { "${params.outdir}/MAPSpeak" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: 'COOLER_ZOOMIFY_MAPS' {
        publishDir  = [
            path: { "${params.outdir}/cooler/MAPS" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: 'JUICER_MAPS' {//convert to .hic file
        publishDir  = [
            path: { "${params.outdir}/cooler/MAPS" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    //annotation
    withName: 'BIOC_CHIPPEAKANNO_MAPS' {
        ext.prefix  = { "bin${bin_size}" }
        publishDir  = [
            path: { "${params.outdir}/MAPSpeak" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: 'BIOC_TRACKVIEWER_MAPS' {
        ext.args    = { "--maxevents $params.v4c_max_events" }
        ext.prefix  = { "bin${bin_size}" }
        publishDir  = [
            path: { "${params.outdir}/MAPSpeak" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    //call_hipeak
    withName: 'PREPARE_COUNTS' {
        ext.args    = { "--peak_pair_block ${params.peak_pair_block} --snow_type ${params.snow_type}" }
        publishDir  = [
            path: { "${params.outdir}/HiPeak" },
            enabled: false
        ]
    }
    withName: 'CALL_HIPEAK' {
        ext.args    = { "--regression_type ${params.maps_model}" }
        publishDir  = [
            path: { "${params.outdir}/HiPeak" },
            enabled: false
        ]
    }
    withName: 'ASSIGN_TYPE' {
        ext.args    = { "--count_cutoff ${params.maps_cutoff_counts} --ratio_cutoff ${params.maps_cutoff_fold_change} --fdr ${params.maps_cutoff_fdr}" }
        publishDir  = [
            path: { "${params.outdir}/HiPeak" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: 'BIOC_CHIPPEAKANNO_HIPEAK' {
        ext.prefix  = 'anno_HiPeak'
        publishDir  = [
            path: { "${params.outdir}/HiPeak" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: 'DIFF_HIPEAK' {
        ext.args    = { "--snow_type ${params.snow_type}" }
        ext.prefix  = 'edgeR_DiffHiPeak'
        publishDir  = [
            path: { "${params.outdir}/DifferentialAnalysis" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: 'BIOC_CHIPPEAKANNO_DIFFHIPEAK' {
        ext.prefix  = 'edgeR_DiffHiPeak'
        publishDir  = [
            path: { "${params.outdir}/DifferentialAnalysis" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    //diffhicar
    withName: 'DIFFHICAR' {
        ext.prefix  = { "edgeR_bin${bin_size}" }
        publishDir  = [
            path: { "${params.outdir}/DifferentialAnalysis" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: 'BIOC_CHIPPEAKANNO' {
        ext.prefix  = { "edgeR_bin${bin_size}" }
        publishDir  = [
            path: { "${params.outdir}/DifferentialAnalysis" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: 'BIOC_ENRICH' {
        ext.prefix  = { "edgeR_bin${bin_size}" }
        ext.args    = "-q $params.enrichment_fdr"
        publishDir  = [
            path: { "${params.outdir}/DifferentialAnalysis" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: 'BIOC_TRACKVIEWER' {
        ext.args    = { "--maxevents $params.v4c_max_events" }
        ext.prefix  = { "edgeR_bin${bin_size}" }
        publishDir  = [
            path: { "${params.outdir}/DifferentialAnalysis" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: 'IGV' {
        publishDir  = [
            path: { "${params.outdir}/igv.js" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: 'CIRCOS_PREPARE' {
        publishDir  = [
            path: { "${params.outdir}/circos" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: 'CIRCOS' {
        publishDir  = [
            path: { "${params.outdir}/circos" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'CUSTOM_DUMPSOFTWAREVERSIONS' {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            pattern: '*_versions.yml'
        ]
    }
}
